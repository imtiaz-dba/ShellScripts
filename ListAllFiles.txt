Contents of CheckConnect.sh
---
#!/bin/bash

#Log file location
LogFile=/tmp/Connections.log
#initializing variable
conn=0


#checking if there is any process listening on port 80 and then get a count and send the results to conn -- additional write the output to a log file

#conn=`/usr/sbin/lsof -i:80 | /usr/bin/ wc -l | /usr/bin/tee -a $LogFile`
conn=`/ssr/sbin/lsof -i:80 | /usr/bin/wc -l`

if [[ $? -ne 0 ]]
then 
    echo "`/bin/date` command to check httpd connectoins failed" >> $LogFile 
    exit 0
fi

echo "`/bin/date` Number of httpd connections $conn" >> $LogFile
if [[ $conn -gt 0 ]]
then 
	echo "httpd is running"
else
	echo "httpd is not running"
fi

Contents of CheckGoogleDNS.sh
---
#!/bin/bash

while true; do
        date
        out=$(nslookup runsignup-shard1.cir94iyeq73b.us-east-1.rds.amazonaws.com 8.8.8.8)
        echo "$out" | grep '10.0.1.145' > /dev/null
        if [ $? -ne 0 ]; then
                echo "$out";
        else
                echo "Shard is good!"
        fi
        
        date
        out=$(nslookup runsignup-ro-2.cir94iyeq73b.us-east-1.rds.amazonaws.com 8.8.8.8)
        echo "$out" | grep '10.0.3.101' > /dev/null
        if [ $? -ne 0 ]; then
                echo "$out";
        else
                echo "Read-replica is good!"
        fi

        date
        out=$(nslookup www.google.com 8.8.8.8)
        echo "$out" | grep 'SERVFAIL' > /dev/null
        if [ $? -eq 0 ]; then
                echo "$out";
        else
                echo "Google is good!"
        fi

        sleep 1
done


Contents of FindDeleteVolumes.sh
---
ec2-describe-volumes | grep available| awk '{print $2}' > us-east-1-volumes.txt
cat us-east-1-volumes.txt;
read -p "Do you wish to continue?" yn
    if ($y = U
        [Yy]* ) 
	echo "hello 1";
	echo "hello 2";
        [Nn]* ) exit;;
        * ) echo "Please answer yes or no.";;
    esac

#for i in `cat /home/ec2-user/us-east-1-volumes.txt` ; do /opt/aws/bin/ec2-describe-volumes  $i; done
#for i in `cat /home/ec2-user/us-east-1-volumes.txt` ; do /opt/aws/bin/ec2-delete-volume  $i; done


Contents of FindSwapUsed.sh
---
#!/bin/bash 
# Get current swap usage for all running processes
# Erik Ljungstrom 27/05/2011
# Modified by Mikko Rantalainen 2012-08-09
# Pipe the output to "sort -nk3" to get sorted output
SUM=0
OVERALL=0
for DIR in `find /proc/ -maxdepth 1 -type d -regex "^/proc/[0-9]+"`
do
    PID=`echo $DIR | cut -d / -f 3`
    PROGNAME=`ps -p $PID -o comm --no-headers`
    for SWAP in `grep Swap $DIR/smaps 2>/dev/null | awk '{ print $2 }'`
    do
        let SUM=$SUM+$SWAP
    done
    if (( $SUM > 0 )); then
        echo "PID=$PID swapped $SUM KB ($PROGNAME)"
    fi
    let OVERALL=$OVERALL+$SUM
    SUM=0
done
echo "Overall swap used: $OVERALL KB"


Contents of FindVolumes.sh
---
ec2-describe-volumes | grep available| awk '{print $2}' > us-east-1-volumes.txt
cat us-east-1-volumes.txt;


Contents of first_two_columns2.sh
---
#!/bin/bash

cat /etc/passwd | cut -d: -f1,2
#exit_code=$?

#if [ "$exit_code" -eq "0" ] 
if [ "$?" -eq "0" ] 
then
	echo "Last command $Command failed with exit code $? "
else 
	echo "Last command $Command succeeded with exit code $? "
fi

	echo "Outside IfElse block: Last command $Command succeeded with exit code $? "


Contents of first_two_columns.sh
---
#!/bin/bash

Command="cut -d: -f1,2 /etc/passwd"

exec $Command
#`$Command`

if [[ "$?" != "0" ]] 
then
	echo "Last command $Command failed with exit code $? "
else 
	echo "Last command $Command succeeded with exit code $? "
fi

	echo "Outside IfElse block: Last command $Command succeeded with exit code $? "


echo "hello"

Contents of ForLoop.sh
---
#!/bin/bash

for i in {1..3};do curl v3.example.com; done

Contents of ListAllFiles.sh
---
#!/bin/bash

filename="*sh"

for file in $filename
do
 echo "Contents of $file"
 echo "---"
 cat "$file"
 echo
done

for i in {1..3};do curl v3.example.com; done

Contents of listS3-BucketObjects.sh
---
#!/bin/ksh


IFS="
"

for line in  `s3cmd ls s3://imtiaz`
do
 echo $line
done
 




Contents of mem.sh
---
#!/bin/bash
 
export AWS_CLOUDWATCH_HOME=/home/ec2-user/CloudWatch-1.0.12.1
export AWS_CREDENTIAL_FILE=$AWS_CLOUDWATCH_HOME/credentials
export AWS_CLOUDWATCH_URL=https://monitoring.amazonaws.com
export PATH=$AWS_CLOUDWATCH_HOME/bin:$PATH
export JAVA_HOME=/usr/lib/jvm/jre
 
# get ec2 instance id
instanceid=`wget -q -O - http://169.254.169.254/latest/meta-data/instance-id`
 
memtotal=`free -m | grep 'Mem' | tr -s ' ' | cut -d ' ' -f 2`
memfree=`free -m | grep 'buffers/cache' | tr -s ' ' | cut -d ' ' -f 4`
let "memused=100-memfree*100/memtotal"
 
mon-put-data --metric-name "FreeMemoryMBytes" --namespace "System/Linux" --dimensions "InstanceId=$instanceid" --value "$memfree" --unit "Megabytes"
 
mon-put-data --metric-name "UsedMemoryPercent" --namespace "System/Linux" --dimensions "InstanceId=$instanceid" --value "$memused" --unit "Percent"

Contents of RegEx.sh
---
#!/bin/ksh


 cur=`pwd`
 echo $cur

Contents of SpecialVariables.sh
---
#!/bin/bash

echo '$# '
echo "$#   Number of command-line arguments or positional parameters"

echo '$*: '
echo "$* All of the positional parameters, seen as a single word"

echo '$@: '
echo "$@  Same as $*, but each parameter is a quoted string, that is, the parameters are passed on intact, without interpretation or expansion."

echo '$-: '
echo "$- Flags passed to script (using set)."

echo '$!: '
echo "$! PID (process ID) of last job run in background"

echo '$_: '
echo "$_  Special variable set to final argument of previous command executed."

echo '$?: '
echo "$? Exit status of a command, function, or the script itself"

echo '$$: '
echo "$$ Process ID (PID) of the script itself. "


Contents of StartIntances.sh
---
#!/bin/bash

echo `date` >> /home/ec2-user/ShellScripts/logs/StartIntances.log
ec2-start-instances i-1dfcbf6d | tee /home/ec2-user/ShellScripts/logs/StartIntances.log
echo "===========================================================" >> /home/ec2-user/ShellScripts/logs/StartIntances.log
echo " "


Contents of StopIntances.sh
---
#!/bin/bash

echo `date` >> /home/ec2-user/ShellScripts/logs/StopIntances.log
ec2-stop-instances i-1dfcbf6d | tee /home/ec2-user/ShellScripts/logs/StopIntances.log
echo "===========================================================" >> /home/ec2-user/ShellScripts/logs/StopIntances.log
echo " "


Contents of SystemMetrics.sh
---
/bin/bash

echo `date` >> /tmp/TopCpuUsers2.txt
/bin/ps auxwww --sort -%cpu | head -10 >> /tmp/TopCpuUsers2.txt
echo "===========================================================" >> /tmp/TopCpuUsers2.txt
echo " "


Contents of test.sh
---
#!/bin/ksh

echo "Hello `date`" > /tmp/hello.txt

Contents of TestWebsite.sh
---
while true; do `curl -I www.contrapunto.com >> curl.www.contrapunto.com.txt` ; sleep 2; done

Contents of WhileDateLast7.sh
---
#!/bin/sh


a=1
while [ "$a" -lt 8 ]    # this is loop1
do
    echo -n "$a "
Date=`date --date="$a day ago" +'%Y-%m-%d'`
   a=`expr $a + 1`
echo $Date

aws ec2 describe-instances --filters "Name=launch-time,Values=$Date*" >> /tmp/File.txt
echo "aws ec2 describe-instances --filters "Name=launch-time,Values=$Date*""
echo "####################################################################"
done

echo"################################################################################"


Contents of WhileLoop.sh
---
#!/bin/sh

a=0
while [ "$a" -lt 10 ]    # this is loop1
do
   b="$a"
   while [ "$b" -ge 0 ]  # this is loop2
   do
      echo -n "$b "
      b=`expr $b - 1`
   done
   echo
   a=`expr $a + 1`
done

Contents of WhileSeqDateLast7.sh
---
#!/bin/sh


for i in `seq 1 7`      # this is loop using seq
do
Date=`date --date="$i day ago" +'%Y-%m-%d'`
echo "For $Date here are the instance launches:"  >> /tmp/File.txt

aws ec2 describe-instances --filters "Name=launch-time,Values=$Date*" >> /tmp/File.txt
echo "aws ec2 describe-instances --filters "Name=launch-time,Values=$Date*""
echo "####################################################################"
done


Hello, visitor to v3.example.com
Hello, visitor to v3.example.com
Hello, visitor to v3.example.com
